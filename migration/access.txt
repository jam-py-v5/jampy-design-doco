.. include:: .special.rst

MS Access migration
=====================

Congratulations on the decision to `migrate` Access to the Web!

After all, it is moving to the modern JavaScript with Bootstrap and jQuery technology Front End! 
Which is powered by Python.


Jam.py is not exclusively developed for Access migration though. Just like Django (Python) or CodeIgniter (PHP), is not.
Both mentioned products are not specialised for the databases oriented applications, even though one could migrate Access to any of those.

However, Jam.py is specialised. Just like Access is.

Before considering migrating Access (or any proprietary software), to the Web with the help of Jam.py, please review some 
answers below. Which might help with understanding what to expect from migration to Jam.py. 


Top Migration Questions
=======================

The MS Access might be a `bread and butter` for many developers out there. Particularly in some 
specific industries like the Law practices or similar. And fair enough. It is the right tool for the job. 

However, the **risk** is that in some years to come, the developers will retire. I know, I'm one of them.
Hence, where will the business find people to maintain their expensive application? Maybe they already 
hired the MSSQL database administrator, since the Access developers told them to do so. The DBA's might be around in years to come, but the Access developers? Or better, THE Access itself?

Hence, the faster we move away from proprietary database AND Front End application, the better. Simply because the technology will be around way after the MS Access is gone. This is business after all, let's put aside the emotions. The HTML is here to stay. Who remembers the Netscape anymore? Or Mosaic?


1. Complacency
--------------

.. pull-quote::
        `Success breeds complacency. Complacency breeds failure. Only the paranoid survive. Andy Grove`
    
      About being paranoid, many MS Access Front End applications are not encrypted! This means the IP (Intellectual Property), is not protected. Even worse! The VBA code might contain email passwords or similar. For example:
      https://wellsr.com/vba/2020/excel/vba-send-email-with-gmail/

      Is your application cyber safety compliant?

      The application might be compliant for some business, however does it run on the Web? Apple Mac? Tablet?
      That is exactly what we are addressing with the migration. The `Future` with the `IP and Cyber Safety`. 


2. VBA?
-------

.. pull-quote::

        `Does your application rely on heaps of VBA for Business Rules (BR)?`

   The VBA can't be migrated to the Web. The question is what is it used for? 5000 lines of VBA code
   might be a dinosaur code! Is it possible to use Python with 200 lines of code? How about 10 lines?
   
   In addition, what might not be recognised is the speed. The VBA just does not compare with Python. The Developers will argue that 
   this is due to the quality of code. Not quite true. The code is just as important as garbage collection, or utilising memory, etc.
   And this is where Python shines. It replaces massive technological debt with a few lines of code.

   For example, the BR might be a way the application authenticates users (ie. a table with username, password, role). Jam.py can reuse the Access tables used for users, so
   no issues with that. When the database is migrated, the users authentication table is there and we can use exactly twelve
   lines of Python code, as seen on Demo, to authenticate users with the roles. 

   Also worth mentioning `VBA to Python – 10 Simple Python vs VBA Examples`_. The article touches on some differences and interesting points from a seasoned VBA developer. However, for building the Jam.py application, JavaScript is used as a Front End. Hence, the real difference is between JS and VBA. For example, showing the MessageBox or conditional formatting and functions. 


   On that note, the above article touches on VBA code for MessageBox:
   
.. code-block:: Python

        Sub MessageBox()
	    'Information box
	    MsgBox "Hello", vbInformation, "Information"
	    'Yes / No question
	    If MsgBox("Do you like this tutorial?", vbYesNo, "Question") = vbYes Then
		Debug.Print "They like it!"
	    Else
		Debug.Print "They don't like it!"
	    End If
	End Sub


.. pull-quote::

	`In JavaScript, Jam.py does that in a similar way:`
    
.. code-block:: JavaScript

        var btn = item.add_view_button('Set invoice paid', {type: 'primary', btn_id: 'paid-btn'});
	    btn.click(function() {
        	item.question('Was the invoice paid?', function () {
		    item.edit();
		    item.paid.value = true;
		    item.post();
		    item.apply(true);
	        });
	    });	

The code above actually does more than displaying the MsgBox! It will upadate all selected records in one go. Imagine writing the VBA code for the same task.

In reality, the MessageBox with JS in Jam.py is something like this:

.. code-block:: JavaScript

        var btn = item.add_view_button('Set invoice paid', {type: 'primary', btn_id: 'paid-btn'});
	    btn.click(function() {
	    	-- do something here --
	        });
    	



.. _VBA to Python – 10 Simple Python vs VBA Examples: https://analystcave.com/vba-to-python-10-examples-python-vs-vba/



3. Excel?
---------

.. pull-quote::
        `Does your application depends on Excel or some other Office products?`

    This might be a show stopper, simply because the organisation will not let go of Excel. This might be 
    particularly true within some Financial institution. The good news is Python can read/write Excel 
    document formats. For sure Access has better interoperability with those products. It is the Desktop
    application after all. However, some operations within Access using Excel, might take a long time, sucking up the resources.
    Not so with Python and Excel. It is super easy to integrate Excel with Jam.py application using `DataTables`_. 
    
    Good resource for using `Excel with Python`_.
    

.. _Excel with Python: https://www.pyxll.com/docs/userguide/vba.html

.. _DataTables: https://www.datatables.net


4. Queries
-----------

.. pull-quote::
        `Most of the "applications" consist of a single hard-coded query or a single linked table.` 

    The above is a quote from `Front-End for MS Access migration?`_ It is an old thread with all points still valid.
    With Jam.py, one does not write queries. It is absolutely possible to do so, if needed. 
    
    It is a low-code framework after all. And that can open the whole new world for a group of developers! Because
    each of them can work simultaneously on some other part of application, being the Forms or the Server procedures,
    everything is instantly visible to everyone with the right privileges.
    
    Hence, everything is simplified. The Jam.py framework will build complex queries just like Access does, with a few
    clicks of the mouse. Contrary to the Access, this query, infact the complete application, will work on any supported
    database. Develop the application and deploy it to preferred database. Simple. No need to 
    rewrite the queries.

5. Primary Keys
---------------

.. pull-quote::
        `Be assured, there are a number of applications out there with no Primary Keys in Access.`

    The Primary Key (PK), is a must with all relational databases. With no PK, Jam.py cannot reference the Foreign Keys (FK).
    Not only relevant to Jam.py, Django does not do that either. Since both are sharing similar ORM. So no matter how 
    we migrate Access to the Web, with which technology, the PK simply must exist. This is even true with Access web 
    applications and web databases. 
      

6. Deployment
-------------

.. pull-quote::
        `If possible, have the front-ends copied locally on each workstation, for performance reasons.`

    Again, the same source `Front-End for MS Access migration?`_ See how nothing really changed from year 2008?

    Some Access Developers would argue that RDP or Citrix or even VPN is the way to deploy the Front End application
    to the Web. All this technology was around in 2008. Nothing new.

    What is new is the Cloud.

    Back to topic. Regarding the Access packaging, some people are using one distributable file, sometimes protected with the encryption. Jam.py 
    can do exactly the same. Even more, one can use SQLCipher to protect the IP. Combining both within a portable 
    application, which can run from, for example Windows x64 with no installation at all, is a powerful deployment 
    and secure method. With such approach, the application database might be off-site or even embedded and encrypted with
    SQLCipher. 
    This method can provide safe and secure access even from a portable drive in an off-line environment, for example with 
    no Internet access at all. Only the local area network is needed for more than one user.

    Regarding Web servers deployment, Jam.py application can be deployed in a few seconds on almost any popular Web server. Which can serve thousands of users simultaneously. Jam.py flagship application is supporting 2000 remote locations, each with 10-20 users. There is no
    need for installation of anything and costs almost nothing.

.. _Front-End for MS Access migration?: https://stackoverflow.com/questions/221995/front-end-for-ms-access-migration


Hope the above sparked some interest. Even though there are probably more reasons why one should or should not try 
to migrate Access application to the Web. With or without using the migration tool as below is providing. 
   
Where from here?
================


To successfully migrate MS Access to Jam.py, the assumption is that at least some knowledge exist with using the Jam.py Application Builder interface. 

If so, please visit: 

https://jampyapplicationbuilder.com/conv/


Depending on file size, the conversion might take a few moments! Please wait to see: File is successfully converted! Access Application with your **data** from here

After the Access file is uploaded and converted with no errors:

- link to Application Builder will show up, which is using the sqlite3 data converted from Access instantly available on the Web! It is super easy and takes no time! **If not interested at all in building the FrontEnd Application**, please click on *Export* to download the DB as zip file which contains the sqlite3 file. The converted sqlite3 database has a long name exactly the same as in provided link. This is to increase safety and security for all downloads.

.. note::
    If interested in showing data on the Web, meaning using Jam.py for the Front End:


The Application Builder link will set the Database to "DB manual mode". This means your new database is safe from changing the structure, like incidentally deleting the table or similar. If you would like to continue migrating Access to Web with the help of Jam.py framework, import all tables into the "Test Import" Group (click on Test Import/Import button), taking care of all needed DB fields correction or missing info. All fields must have a datatype if not already recognized. The "DB field name" should not be touched, the "Caption" is normally MS Access field caption, and the "Name" must be valid `JavaScript naming standard`_, in short, no spaces, special characters, etc. To help out with the process, here are some videos:

Video overview - `Jam.py VS MS Access`_

Video tutorial - `How to publish MS Access Application to Web using Jam.py and SQLite3`_

Video tutorial - `Simple CRM built automatically with Selenium IDE in 2.45minutes`_, demonstrates the `Tutorial. Part 1. First project`_

New style Demo - `Migrated Access Application`_ (expiry on 04 Aug 2022)

.. _Jam.py VS MS Access: https://www.youtube.com/watch?v=ZpgEJh80QAs
.. _How to publish MS Access Application to Web using Jam.py and SQLite3: https://www.youtube.com/embed/eaVjUEYG3Ac
.. _Simple CRM built automatically with Selenium IDE in 2.45minutes: https://www.youtube.com/embed/Sv_IllxQ_RY
.. _Migrated Access Application: https://jampyapp.pythonanywhere.com/
.. _Tutorial. Part 1. First project: https://jampyapplicationbuilder.com/docs/intro/tutorial01/index.html
.. _JavaScript naming standard: https://www.w3schools.com/js/js_conventions.asp

After Importing some tables, just replace **builder.html** with **index.html** from the link to access your Application. Sometimes the index.html page will not show anything due to Load Balancer issues. Please try after some time. Or start over. One can even set the App password or create users within the Builder. The default App/Builder username/password is admin/111, change it on Project/Users and set Project/Parameters/Safe Mode to restrict access, etc. One can set all `lookups`_ to different tables as usual. It should be a fully functional App with all the bells and whistles!


.. _lookups: https://jampyapplicationbuilder.com/docs/intro/tutorial01/lookup_list.html

It is important to note that once the Access file is converted and all tables Imported through the builder.html, it is not needed to use this service at all. Immediately use the **Export [CTRL+E]** option and download the Export file. Then, install the `Python Jam.py`_ framework locally or on the server, create the `New application`_, `Import`_ the same downloaded file, and point the Application to sqlite database as per creating the New application. That is all.

.. _Python Jam.py: https://jampyapplicationbuilder.com/docs/intro/install.html
.. _New Application: https://jampyapplicationbuilder.com/docs/intro/new_project.html
.. _Import: https://jampyapplicationbuilder.com/docs/admin/project/metadata_file.html


Notes/Issues
-------------

This tool is for the database tables only, it does not convert MS Access file with no tables in it. Hence, **no need to upload a Front End application**, which probably connects to SQL Server or some other database(s). Output will be empty, or it will contain only a few tables.

**The process is expecting that the Primary Key exist on all tables.** Please address and fix this issue before attempting the conversion. Only Use One Numeric Field as the Primary Key, ie. **AutoNumber field**.

MS Access might have a **special character, space, slash/backslash, dash (-),quote(')**, etc for the **table field, as well as table name**. The conversion will try to replace those, however, we would advise to fix the issues in MS Access, before attempting the conversion.

The conversion will fail if there are **linked tables in MS Access**. Please remove any linked tables before attempting the conversion.

The conversion will fail if Access is using utf-16-li, no need to try again. No log or link will be produced and we suggest fixing Access.

There might be an #Error in the Access field, please fix it if conversion fails, and attempt again. **The best is to inspect the Log file, sometimes clearly showing the error**. If the log file is empty, something went wrong. No need to try again if Access wasn't fixed.

Please do not upload confidential, private or **password protected/encrypted database**. If conversion to SQLite3 is needed for such data, the tool can be provided on `demand`_. Password protected database conversion might fail, no need to try again.

.. _demand: https://jampyapplicationbuilder.com/contact.html

Terms and Conditions
---------------------

"This site and its components are offered for informational purposes only; this site shall not be responsible or liable for the accuracy, usefulness or availability of any information transmitted or made available via the site, and shall not be responsible or liable for any error or omissions in that information."

Now what?
=========

First of all, thanks for trying the migration! 

Now that the database is converted to SQLite3, let's see what we can do with it. The migration utility just speeds up the process of getting the 
data on the net. It does not build the Front End Application, even though we could easily automate this step.

But than, the Front End **look and feel** is subjective. If replicating the exact MS Access form as close as possible, it really takes no time to do it manually.

Before doing that, the best is to have a look at the MS Access Relational Diagram. It should clearly show the relations between the tables, as seen on the `Chinook`_ database.

For Access application with no Relation Diagram within it, it is still possible to look at the queries design. Each query would probably mean some sort of relation between two or more tables. Hence, in Jam.py, it is possible to create the Lookup fields to other tables just like MS Access does. 

.. _Chinook: https://jampyapplicationbuilder.com/tips/howDemo/build.html#chinook


Tables
------

In order to use the automatic displaying of data (automatically with CRUD), the table name is used as table Caption! That is, if the Caption was
not changed during the table Import.

Hence, if the database table name is ``django_ledger_accountmodel``, than the JavaScript variable Name is also ``django_ledger_accountmodel``!
And more importantly, the visible table Caption on the Application is ``django_ledger_accountmodel`` as well.

So maybe better to set the table ``Caption`` to ``Account``, ``Bank``, etc. See how nicely everything looks like on the screenshot below?


This is also true for any table column during the table Import. We are working on the new feature to improve this. 

Finally, the application might look like this:

.. image:: _images/django01.png
	:scale: 80 %
	:align: center
	:alt: Django Ledger



The MS Access Linked tables are impossible to import, hence they do not exist. However, we are working hard to enable that feature for linked tables as well.
Of course, the MS Access linked tables are just the issue when using the conversion tool provided above. One can always connect to MSSQL server directly from Jam.py Application Builder and Import the tables. 

Using UTF8
-----------

The above is all well and true for the English language. Or the Latin alphabet. However, using UTF8 in MS Access is supported, but not supported in `JavaScript naming standard`_.  

Consider this _`scenario`:

.. image:: _images/Italian_Access.png
	:scale: 80 %
	:align: center
	:alt: Italian Access Table

First of all, the Table name is **00_COSTES ALFONSO**. And the list of the tables continues with **01_, 02_, 03_**, etc. 
Unfortunately, it is also using this as a table name: **00_PRECIOS ICM > GENOCOL_IMAT**.

Which just proves that MS Access will accept anything we throw on it. Is this a good practice? It is for Access tho. However, any modern framework will reject this practise.
Including Jam.py. Sorry about that, it is what it is. Not Jam.py fault.

Importing the above table will produce the below:

.. image:: _images/Italian_table.png
	:scale: 80 %
	:align: center
	:alt: Italian jam.py Table


The table Import as such will fail. It cannot be imported, and the problems needs to be fixed first.

Reviewing the actual table fields we see that the UTF8 is used for the table field: **definición_de_la_patología**. Note how the original MS Access field used is **Definición de la patología** with spaces? The conversion replaced spaces with the underscore automatically. It does that for the table name as well. However, it cannot do more than that, 
it's a too big ask.


Of course, the Import is not going to fail, due to `JavaScript naming standard`_ for the column :red:`Name`.

The solution is to rename **definición_de_la_patología** to **definicion_de_la_patologia**, or similar valid Name. The **DB Field name** can stay as is: Definición_de_la_patología.


Finally, the Italian language field from MS Access might look like this:

.. image:: _images/Italian_final.png
	:scale: 80 %
	:align: center
	:alt: Italian Field




As seen, Jam.py will happily use the UTF8 for the `Caption`. As well as the SQLite3 for database table :red:`Name` and the :red:`DB field name`. JavaScript naming standard is now fixed for the :red:`Name` :red:`*`.

In short, for any non-English language, or non-Latin alphabet, like the below Hebrew language, the :red:`Name` :red:`*` must be changed to Latin alphabet, and the rest can stay the same:

.. image:: _images/hebrew.png
	:scale: 80 %
	:align: center
	:alt: Hebrew Name



Field Captions
---------------

There is a utility for MS Access to dump all table fields Captions (MS Access optional Descriptions), to the CVS file. Why would we do that? Well, almost all third-party database conversion utilities do not write the Captions to the new database. Hence, the Access information might be lost. This is particularly true for a non English Access Front End Application, where the developers might utilise Captions from the Language table. Hence, the table name would always be the same, only the Captions would dynamically change.


In the above Italian language `scenario`_, the Access Caption might be **Definición de la patología**. However, the MS Access Developer decided not to use Captions at all. Hence, the table Import will use the table name for the Caption, which is fine for this example as there are no many non-Latin names.

However, please consider the Access application **with** the field captions! This is what we are trying to resolve, so we reuse all the hard work already done in Access.


For example, if the MS Access table DEMO_TRACKS has a field `NAME` and the Caption for the field `Track title 3`, the CSV file might look like below and the 
code to update it: 


.. code-block:: Python

        import sqlite3

        import numpy as np

        captions = np.loadtxt('test.csv', dtype=str, delimiter=',')

        #print(captions)

        #captions = [

        #        ['DEMO_TRACKS', 'NAME', 'Track title 3']

        #    ]

        con = sqlite3.connect('admin.sqlite')

        cursor = con.cursor()

        for table_name, field_name, caption in captions:

            cursor.execute("SELECT ID FROM SYS_ITEMS WHERE DELETED=0 AND F_TABLE_NAME='%s'" % table_name)

            res = cursor.fetchone()

            if res:

                item_id = res[0]

                cursor.execute("SELECT ID FROM SYS_FIELDS WHERE DELETED=0 AND OWNER_REC_ID=%s AND F_DB_FIELD_NAME='%s'" % (item_id, field_name))

                res = cursor.fetchone()

                if res:

                    field_id = res[0]

                    cursor.execute("UPDATE SYS_FIELDS SET F_NAME='%s' WHERE ID=%s" % (caption, field_id))

        con.commit()

        con.close()


.. note::
        To prepare the CSV file, use Excel as "Save As" - "CSV UTF" - very important!


Also very important to run dos2unix command on the file in Linux, since it will otherwise do this at the output:

[['\ufeffDEMO_TRACKS, ..]


.. note::
	The good news is, our conversion utility now supports Access Captions and they are written directly into the SQLite3 database as comments. All popular SQLite3 utilities, like “DB Browser for SQLite” or "SQLiteman", can read the database schema with the comments.

The below is an example for Arabic language where MS Access utilises the optional Description, which Jam.py might use for Captions:

.. code-block:: Python
	CREATE TABLE `Location` -- منطقه (`ID` INTEGER PRIMARY KEY AUTOINCREMENT -- ردیف
	,
	`location` VARCHAR(255) DEFAULT '' -- منطقه
	,
	`Edare` VARCHAR(255) DEFAULT '' -- اداره
	,
	`Address` VARCHAR(255) DEFAULT '' -- آدرس
	)

We are working towards enabling Jam.py to read the table and field comments and interpret them as Captions while importing the table. As seen, the `JavaScript naming standard`_ does not apply for the above table, since the table is using Latin language for 
everything except Captions.


Deleted Flag
------------

In order to use a full Jam.py functionality with so called `Deleted Flag`, which basically prevents data to be permanently deleted, we need to 
add :red:`DELETED` field to the tables. However, this is not required for Jam.py or the Application to function. It is an nice feature to have, 
specially if the `Foreign Key` enforcing is enabled. Meaning, some data cannot be deleted if some other data exist elsewhere as a reference.
`Deleted Flag` totally eliminates the hustle of enforcing Foreign Keys deletion.

We could easily automate adding the `DELETED` field during the conversion. But than, as it is not required for all tables probably, this is what we can do:

    - we can add a field to any table with a Python code, as per below. The db.sqlite3 is the database converted from Access.


.. note::

        "Order" word  is a reserved word for  Python, so we exclude it. There are other reserved words, please consult the Python or Jam.py documentation.


.. code-block:: Python

        import sqlite3 

        connection  = sqlite3.connect("db.sqlite3") 

        cursor      = connection.cursor()  

        tableQuery = "select * from sqlite_master where type = 'table' and name != 'Order' "

        cursor.execute(tableQuery)

        tableList = cursor.fetchall()

        for table in tableList:   

            renameTable = "ALTER TABLE %s"%(table[1]) + " ADD COLUMN DELETED integer"

            print(renameTable)

            cursor.execute(renameTable) 

        connection.close()

Now, we should be able to select the `Deleted Flag` as `deleted` field on the table Import.

Indexes
-------

As stated, the migration does not import indexes. This is due to a number of constraints. The good news is once the data is converted, 
the indexes can be created within the Builder. The good practise is to index all `lookups` on some table.

Why is this important? Because doing it within the Builder, all indexes are kept and can be recreated on any supported database engine.
If the indexes exist within the database only, the Builder would not know about it and they would be lost when moving Application 
to the preferred database.

Foreign Keys
------------

Similar scenario, after the data is migrated, we can create FK's within the Builder. Again, the Jam.py utilises `lookups` for looking up for data.




Users table
-----------

If already using some MS Access database table for users authentication, the only thing missing is the Role `lookup`. It is quite possible that 
the role is hard-coded in Access, and this is what we are trying to avoid. Use `lookups` as much as possible.

The process is described in here: `How to authenticate from custom users table`_.

Obviously, it is the best practise to use password hash for storing the passwords. This simply means adding a column with a **Password hash** text to 
the `Users` or similar table. 

.. _How to authenticate from custom users table: https://jampyapplicationbuilder.com/docs/how_to/authentication/how_to_authenticate_from_custom_users_table.html



.. note::
    To Be Continued...
