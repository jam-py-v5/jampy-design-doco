.. include:: .special.rst

.. _PersonalAccountLedger:

Personal Account Ledger
========================

The application lives here:

https://msaccess.pythonanywhere.com

The Access Template Personal Account Ledger has a "feature" which enables typing the negative value for currency. Then the actual Expense is automatically converted to Income, since the negative currency becomes a positive value! Our migrated project does not allow for this due to `validation`_.

The complete application was developed in a few hours` time.  Below is the approximate process:

-	The template was uploaded to https://jampyapplicationbuilder.com/conv/ to give us all tables and data needed for the project. 
-	All tables were imported into the Jam.py Application Builder from the provided link after the upload. Since the Access Categories Form has a Drop-down list with the Income and Expense, the Lookup List was created with the same. 


Lookup List
------------

.. image:: _images/Personal03.png
	:scale: 65 %
	:align: center
	:alt: Personal Account Ledger


-   By looking at the Access Database Tools Relationships, the _`Account Transactions` table `Category` field was linked by the Lookup Item to Categories Description field. The `Income or Expense` field was created in the `Transaction table` and linked to the Categories same field. Also, the `actual_amount` field was added, since in Access this is a query field. 

.. image:: _images/Personal01.png
	:scale: 65 %
	:align: center
	:alt: Personal Account Ledger


-    The Categories `Income or Expense` was linked to Lookup Value List.

.. image:: _images/Personal02.png
	:scale: 65 %
	:align: center
	:alt: Personal Account Ledger


A little code
--------------

-   The first code was added to restrict adding a negative currency with the _`MessageBox` displaying the Alert.


.. code-block:: JavaScript

        function on_field_validate(field) {
            if (field.field_name === 'transaction_amount' && field.value < 1) {
                    return 'The amount cant be negative!';
            }
        }


-	Then, we observed how is Access displaying the Expense/Income formatting in :red:`red` and :green:`green` color on the _`Data Grid`. The decision has been made to display the actual Expense/Income text in a coloured way as well as the value.
-	The code was added to accommodate for the above:


.. code-block:: JavaScript

        function on_field_get_html(field) {
            let item = field.owner;
            if (field.field_name === 'category') {
                let color = 'green';
                if (item.income_or_expense.display_text === 'Expense') {
                    color = 'red';
                }
                return '<span style="color: ' + color + ';">' + field.display_text + '/' + field.owner.income_or_expense.display_text + '</span>';
            }
            if (field.field_name === 'actual_amount' || field.field_name === 'category') {
                let color = 'green';
                if (item.income_or_expense.display_text === 'Expense') {
                    color = 'red';
                }
                return '<span style="color: ' + color + ';">' + field.display_text + '</span>';
            }
            
        }

-	Because Access is triggering the displaying of Actual Amount relative to Expense option in  :red:`red` color, or Income as :green:`green` colour, the code was added to trigger the similar behaviour:

.. code-block:: JavaScript

        function on_field_changed(field, lookup_item) {
            var item = field.owner;
            if (field.field_name === 'transaction_amount' || field.field_name === 'category') {
                calculate(item);
            }    
        }


-	The JS function is needed to actually do the displaying of _`positive to negative` values and vice versa:

.. code-block:: JavaScript

        function calculate(item) {
            if (item.income_or_expense.value) {
                item.actual_amount.value = item.transaction_amount.value;
                if (item.income_or_expense.display_text === 'Expense') {
                    item.actual_amount.value = -item.actual_amount.value;
                }
            }
            else {
                item.actual_amount.value = 0;
            }
        }


-  Some formatting was added to make the Entry Title in bold. The below function was added at the end of `on_field_get_html` function from above:

.. code-block:: JavaScript


        if (field.field_name==='entry_title') {
            return '<strong>' + field.display_text + '</strong>';
        }

-	Then, the Dashboard/Reports was added. Some tlc is still needed for those. The `Dashboard` was covered in "How was Demo built?" topic

.. note::

        -	The above is all from the actual application Front End point of view. It looks pretty similar to Access, correct? At this moment it is absolutely possible to turn on the "Safe Mode", which is the Authentication.

-	All of the above was added to Account Transactions `Client module`. No more code is needed for Access basic Front End look and feel. The additional code for Authentication was copy/paste from the https://jampyapp.pythonanywhere.com/ project. Please observe the code and needed tables within the  Builder/Authentication tab. Also, the index.html file was modified and added simple-line-icons support with the Task/project.css. Same copy/paste from the mentioned project.


-	The `Clone` button  was developed latter to emulate the support for highlighted row copy/paste.
-	The `Delete` button was disabled with the `MessageBox`_ displaying the Alert, since the deletion is disabled for Publicly accessible application. This is controlled in Task/Account Transaction/Client module, please search for `deleted`, since deletion is actioned on CTRL+DEL as well.

-   After two weeks running and some feedback from the Users, the Account `Transaction`/`Filter` was added. Also, some formatting was developed, particularly for displaying :red:`red` and :green:`green` `Actual Amount` on the Form. This is not the `Data Grid`_ formatting, which was added from the beginning. Hence, consider the above `positive to negative`_ function. The function was missing the CSS needed for the Form. The new function is below:

.. code-block:: JavaScript

        function calculate(item) {
            if (item.income_or_expense.value) {
                item.actual_amount.value = item.transaction_amount.value;
                if (item.income_or_expense.display_text === 'Expense') {
                    item.actual_amount.value = -item.actual_amount.value;
                    item.edit_form.find('input.actual_amount').css('color', 'red');    
                }
                else {
                    item.edit_form.find('input.actual_amount').css('color', 'green');    
                }
            }
            else {
                item.actual_amount.value = 0;
            }
        }

-   More formatting was added to resize the fields. Here, we introduced a new Jam.py function for changing the CSS when the Edit/New Form is active. Which is as well changing the CSS for the field, but this time on the Edit/New Form:

.. js:function:: on_edit_form_shown


.. code-block:: JavaScript


        function on_edit_form_shown(item) {
            if (item.income_or_expense.value) {
                //item.actual_amount.value = item.transaction_amount.value;
                if (item.actual_amount.value < 1) {
                    item.edit_form.find('input.actual_amount').css('color', 'red');    
                    //item.actual_amount.value = -item.actual_amount.value;
                }
                else {
                    item.edit_form.find('input.actual_amount').css('color', 'green');    
                }
                
            }

          item.edit_form.find('input.entry_number').parent().width('40%');
          item.edit_form.find('input.transaction_amount').parent().width('40%');
          item.edit_form.find('input.category').parent().width('60%');  
          item.edit_form.find('input.categories').parent().width('60%');
          item.edit_form.find('input.income_or_expense').width('60%');
        }


-   History/Edit Lock was added. This is a no code operation done on Project/Parameters.
-   The Report was missing the `Income/Expense` Parameter. Added. The Reports design and code might be covered latter on.
-   The Filters was added for `Account Transaction` table. Because of the "combined" Category with the "/" sign, some tweaking was needed. Here is the code added to the `Account Transactions`_ table, and the code to add three buttons. The buttons "Clone", "Filter by type" and "Clear filters", respectively:


.. code-block:: JavaScript

        function on_view_form_created(item) {
            if (!item.lookup_field) {    
                var clone_btn = item.add_view_button('Clone', {image: 'icon-magic-wand'});
                clone_btn.click(function() { clone_record(item) });
            }
            //here is setting for filter by type of transaction (income or expense)
            let filter_type_btn = item.add_view_button('Filter by type', {type: 'primary', image: 'icon-filter'});
                filter_type_btn.click(function() { 
                    filter_by_type(item);
                });
                
            let clear_filters_btn = item.add_view_button('Clear filters', {type: 'danger', image: 'icon-remove'});
                clear_filters_btn.click(function() { 
                    item.clear_filters();
                    item.refresh_page();
                });
                    
        }  

        function filter_by_type(item) {
            let copy = task.categories.copy({handlers: false});
            copy.open({fields: ['income_or_expense'], open_empty: true});

            copy.edit_options.title = 'Filter by type of transaction';
            copy.edit_options.history_button = false;

            copy.on_edit_form_created = function(c) {
                c.edit_form.find('#ok-btn')
                    .text('Select type')
                    .off('click.task')
                    .on('click', function() {
                        try {
                            c.post();
                            let categories_by_type = task.categories.copy({handlers: false}),
                                categories_list = [];
                                categories_by_type.set_where({income_or_expense: c.income_or_expense.value});
                                categories_by_type.open({fields: ['id']});
                                
                                categories_by_type.each(function(s){
                                    categories_list.push(s.id.value);
                                });
                                
                                item.filters.category.value = categories_list;
                                item.refresh_page();
                            c.cancel_edit();
                        }
                        finally {
                            c.edit();
                        }
                    });
            };
            copy.on_edit_form_keyup= function(c, e) {
                if (e.keyCode === 13 && e.ctrlKey) {
                    e.preventDefault();
                    return true;
                }
            };
            copy.append_record();
        }

-   More summary was added for `Account Transaction` table. This is a no code operation done on View Form.

.. _Validation:

Validation
------------

This is the JS code for the transaction amount validation. 
We also added on the table ``account_transactions``, 
field `transaction_amount`, on the the Interface Help: `Value should be less then 10000`.

.. code-block:: JavaScript

        function on_field_validate(field) {
            if (field.field_name === 'transaction_amount' && field.value < 1) {
                    return 'The amount cant be negative!';
            }
            if (field.field_name === 'transaction_amount' && field.value > 10000) {
                    return 'The value is be less then 10000!';
            }    
        }

In June 2023, added date validation to above code, and the Order by `Entry Date` as DESC:

.. code-block:: JavaScript

            if (field.field_name === 'entry_date' && field.value > Date.now()) {
                    return 'The date can not be in future!';
            }    


index.html
----------

-   Added the Export tab to download the latest source code. The Export feature is available by default on the Application Builder. The Builder is not accessible publicly due to the security reasons. Here is the code added to index.html file below "about" and `Account Transaction` table "function on_page_loaded(task)":


.. code-block:: html

        <li id="about"><a href="#">About</a></li>                        
        <li id="export"><a href="#">Export</a></li>


.. code-block:: JavaScript

        $("#menu-right #export a").click(function(e) {
                    var url = [location.protocol, '//', location.host, location.pathname].join('');
                    url += 'static/internal/AccountTransactions.zip';
                    window.open(encodeURI(url));
        });



-   Maybe the last feature needed is the CVS (spreadsheet) export/import. This step is fully documented in the official documentation.





.. note::
    To Be Continued when/if more features were added ...
