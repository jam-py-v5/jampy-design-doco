===============
Getting Started
===============

The first thing to understand is the Jam.py Terminology: the difference between Catalogs (Catalogues) and Journals.

Excellent Article by Marco Fioretti @ Linux Magazine:

https://www.linux-magazine.com/Issues/2020/241/Jam.py

We will reference the above article:

`Every Jam.py interface, or project, is structured as a tree of tasks that are organized in groups. You may create custom groups if you like; however, at least for your first Jam.py projects, I strongly suggest that you stick with the default task tree, which consists of four groups called Catalogs, Journals, Details, and Reports.`


Catalogs (Catalogues)
=====================


.. note::
    `Catalogs are tables that store actual records, like the inventory of a store or the students of some school.`


Journals
========

.. note::
    `Journals store information about events or transactions pertaining to the records in the Catalogs – such as invoices or purchase orders.`


Details
=======

.. note::
    `Details` store detailed information pertaining to the records in the Journals – such as invoices items details or purchase orders items details.

Reports
=======

.. note::
    `Reports` are `reports based on OpenDocument templates`, more specifically LibreOffice Calcs ods files.



=======================
Authentication Decision
=======================

There are a number of Design decisions to make, namely what is the Authentication method the Application will use, the need for Users Registration and password reset, or forgotten password mechanism, default Language or translations, Business Logic and what not.



Built in Authentication
=======================

Jam.py has a built in Authentication based on Users and Roles tables within **admin.sqlite** database. This method works fine for smaller Applications or Proof of  Concept (PoC). However, for larger implementation it might be needed to extend the Users/Roles table for the a Application specific need. There might be also an requirement to store this two tables outside the admin.sqlite database for improved security by using some other database than SQLite3. To copy Users/Roles from a `built in` database to some other Application (e.g. from Development to Test), export/import of SYS_USERS and SYS_ROLES tables is needed. All Administrator accounts accessing the Builder interface use `built in` database.


Non built in Authentication
===========================

To extend the Authentication with the Application database and Users/Roles tables is easy. Please consult the official Jam.py Documentation how to do that. The benefits for doing it is the ability to use the database backup or export, which will contain all information specific to the Application, in one or more backup/export files. There is no need to export/import SYS_USERS/SYS_ROLES tables, unless there are a large number of Administrator accounts who are accessing the Builder interface.

With non `built in` Authentication, the Application can, as an option, use a custom Python password hashing within the `Task/\Server Module`. It is also possible to develop custom password complexity, or password lifetime, which does not exist with `build in` method.


External Authentication
=======================

LDAP (Active Directory) Authentication
--------------------------------------

LDAP is supported by Jam.py v5. LDAP or Active Directory Authentication is fairly straight forward, and it is possible to use a specific LDAP (AD), branch (or AD Groups), where the Jam.py Users exist.
The Application will still use `built in` or `non built in` database for storing Users/Roles.

.. note::
    The Python `Business Logic (BL)` can be  developed within the `Task/\Server Module`. 

For example, if the User does not exist in the Application database, it can be created with Python BL and some Role can be assigned for the User. Otherwise, the User accessing the Application **should** be created first manually in the Application with the specific Role assigned.

Please refer to more info in here: https://groups.google.com/g/jam-py/c/Q2iqvSA1zTM/m/o8HKxhvSCgAJ

.. note::
    It is worth using SSL with all connection to LDAP or AD.

SAML Authentication
-------------------

In addition to LDAP,  SAML will be supported in newer major versions. SAML depends on the DNS service and the SSL Certificates issued for the Application name. It is a large implementation for mostly commercial environment. 

Please visit Demo Application in here: http://auth.jampyapplicationbuilder.com

OAuth2 or OpenID Authentication
-------------------------------

Similar to SAML, it is possible to develop both Authentication mechanisms, however at this time of writing Jam.py only supports SAML.


MFA or Two Factor Authentication
--------------------------------

Instead of using LDAP or SAML, the Application might consume Multi Factor Authentication, with Google Authenticator, FreeOTP or similar mobile phone method.

Please refer to more info in here: https://groups.google.com/g/jam-py/c/Nisyemcx6Vc/m/d6m7A4WSDQAJ

User Registration Form
=======================

Instead of manually creating the Users, regardless of Authentication method, the Application might use a Registration Form for initial User creation. the default Role might be assigned for the User by `Business Logic (BL)`.

Please consult the official Jam.py Documentation how to create a Registration Form.


Forgotten Password Method
=========================

For the Application Authenticated Users it might be worth to provide the Forgotten Password method by email. Jam.py already has `Change Password` methond explained in the official documentation. However, Forgotten Password method depends on multitude factors, namely sending emails from the Application.

Please refer to more info in here: https://groups.google.com/g/jam-py/c/SYn2R0ILy74/m/Y5YMzUsSCAAJ

